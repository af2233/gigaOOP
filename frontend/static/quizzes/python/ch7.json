{
    "title": "Декораторы классов в Python",
    "description": "python\\ch7",
    "theme_id": 7,
    "questions": [
      {
        "question_text": "Какой декоратор используется для определения метода, который не зависит от экземпляра или класса?",
        "answers": [
          {
            "answer_text": "@classmethod",
            "is_correct": false
          },
          {
            "answer_text": "@staticmethod",
            "is_correct": true
          },
          {
            "answer_text": "@property",
            "is_correct": false
          },
          {
            "answer_text": "@abstractmethod",
            "is_correct": false
          }
        ]
      },
      {
        "question_text": "Как можно использовать декоратор @property для контроля за изменением атрибутов класса?",
        "answers": [
          {
            "answer_text": "Определяя метод с декоратором @property и изменяя атрибут напрямую.",
            "is_correct": false
          },
          {
            "answer_text": "Определяя метод с декоратором @property и используя @property.setter для контроля за изменением атрибута.",
            "is_correct": true
          },
          {
            "answer_text": "Используя только декоратор @property без дополнительных методов.",
            "is_correct": false
          },
          {
            "answer_text": "Используя декоратор @property вместе с @classmethod.",
            "is_correct": false
          }
        ]
      },
      {
        "question_text": "Что делает декоратор @property в Python?",
        "answers": [
          {
            "answer_text": "Определяет метод, который может изменять состояние класса.",
            "is_correct": false
          },
          {
            "answer_text": "Определяет метод, который получает экземпляр класса в качестве первого аргумента.",
            "is_correct": false
          },
          {
            "answer_text": "Определяет метод, который можно использовать как атрибут.",
            "is_correct": true
          },
          {
            "answer_text": "Определяет метод, который не получает ни экземпляр, ни класс в качестве первого аргумента.",
            "is_correct": false
          }
        ]
      }


    ]
  }